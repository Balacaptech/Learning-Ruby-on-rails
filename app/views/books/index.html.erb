<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>All Books</title>
  <%= csrf_meta_tags %>

  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  
  <!-- Toastify CSS -->
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
</head>
<body>

<div class="container mt-5">
  <nav class="navbar navbar-light bg-white shadow-sm position-fixed top-0 end-0 w-100 px-4 py-2" style="z-index: 1030;">
    <div class="container-fluid justify-content-end">
      <div class="dropdown">
        <img id="user-avatar" 
             src="https://via.placeholder.com/40x40?text=U" 
             class="rounded-circle shadow-sm me-2" 
             width="40" height="40" 
             alt="User Avatar" 
             role="button" 
             data-bs-toggle="dropdown" 
             aria-expanded="false">
        <ul class="dropdown-menu dropdown-menu-end text-small shadow" style="min-width: 180px;">
          <li><a class="dropdown-item" href="/profile"><i class="bi bi-person me-2"></i> My Profile</a></li>
          <li><hr class="dropdown-divider"></li>
          <li class="text-center px-3 pb-2">
            <button id="logoutBtn" type="button" class="btn btn-outline-danger w-100">
              <i class="bi bi-box-arrow-right me-1"></i> Logout
            </button>
          </li>
        </ul>
      </div>
    </div>
  </nav>
  <br><br>
  <h1 class="text-start mb-4">All Books</h1>

  <div class="d-flex justify-content-between mb-3">
    <button onclick="window.location.href='/books/new'" class="btn btn-success">Add Book</button>
  </div>

  <div class="row mb-3">
    <div class="col-12 d-flex justify-content-end">
      <div class="input-group input-group-md" style="width: 300px;">
        <input type="text" id="bookSearch" class="form-control" placeholder="Search books...">
        <button class="btn btn-outline-info" type="button" id="searchBtn">Search</button>
      </div>
    </div>
  </div>

  <div class="table-responsive">
    <table class="table table-bordered table-hover align-middle" id="booksTable">
      <thead class="table-dark">
        <tr>
          <th onclick="sortTable('title')">Title ⬍</th>
          <th onclick="sortTable('author')">Author ⬍</th>
          <th onclick="sortTable('description')">Description ⬍</th>
          <th>Images</th>
          <th onclick="sortTable('price')">Price ⬍</th>
          <th style="width: 150px;">Action</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>
</div>

<!-- Bootstrap JS Bundle -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

<script>
  window.addEventListener('DOMContentLoaded', () => {
    const userId = localStorage.getItem('user_id');
    console.log("userId", userId);
    if (!userId) {
      window.location.href = '/login';
      return;
    }

    const apiBase = `/api/users/${userId}/books`;
    let booksData = [];
    let currentSort = { key: '', direction: 'asc' };

    async function fetchBooks(search = '') {
      let url = apiBase;
      if (search) {
        url += `?search=${encodeURIComponent(search)}`;
      }

      const response = await fetch(url);
      const data = await response.json();
      console.log("data",data);
      console.log("response",response);

      booksData = (data.books || []).filter(book => !book.deleted);
      renderTable(booksData);
    }

    function renderTable(bookList) {
      const tbody = document.querySelector('#booksTable tbody');
      const thead = document.querySelector('#booksTable thead');
      tbody.innerHTML = '';

      if (bookList.length === 0) {
        thead.style.display = 'none';
        const tr = document.createElement('tr');
        tr.innerHTML = `<td colspan="5" class="text-center text-muted">No books found</td>`;
        tbody.appendChild(tr);
        return;
      }

      thead.style.display = '';
      bookList.forEach(book => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${book.title}</td>
          <td>${book.author}</td>
          <td>${book.description || '-'}</td>
          <td>
          ${book.file_url
            ? `<a href="${book.file_url}" target="_blank">
                <img src="${book.file_url}" alt="Book File" style="width: 60px; height: auto;" class="rounded shadow-sm" />
              </a>`
            : '<span class="text-muted">No file</span>'}
        </td>
          <td>${book.price ?? '-'}</td>
          <td>
            <div class="btn-group" role="group">
              <button class="btn btn-sm btn-outline-primary" onclick="window.location.href='edit.html?id=${book.id}'">Edit</button>
              <button class="btn btn-sm btn-outline-danger" onclick="deleteBook(${book.id})">Delete</button>
            </div>
          </td>`;
        tbody.appendChild(tr);
      });
    }

  window.sortTable = function(key) {
  if (currentSort.key === key) {
    currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
  } else {
    currentSort = { key, direction: 'asc' };
  }

  const sorted = [...booksData].sort((a, b) => {
    let valA = a[key] ?? '';
    let valB = b[key] ?? '';
    if (typeof valA === 'string') valA = valA.toLowerCase();
    if (typeof valB === 'string') valB = valB.toLowerCase();
    if (valA < valB) return currentSort.direction === 'asc' ? -1 : 1;
    if (valA > valB) return currentSort.direction === 'asc' ? 1 : -1;
    return 0;
  });

  renderTable(sorted);
};

   
    window.deleteBook = async function(bookId) {
      console.log("bookid", bookId);
      if (!confirm('Are you sure you want to delete this book?')) return;

      try {
        const response = await fetch(`${apiBase}/${bookId}`, 
        { method: 'DELETE' });
        if (!response.ok) throw new Error('Failed to delete book');
        showToast("Book deleted successfully", "success");
        fetchBooks(document.getElementById('bookSearch').value.trim());
      } catch (error) {
        showToast(error.message, "error");
      }
    }

    

    function showToast(message, type = "success") {
      Toastify({
        text: message,
        duration: 3000,
        gravity: "top",
        position: "right",
        backgroundColor: type === "success" ? "#28a745" : "#dc3545",
        close: true
      }).showToast();
    }

    async function logoutUser() {
      try {
        const csrfMeta = document.querySelector('meta[name="csrf-token"]');
        const csrfToken = csrfMeta ? csrfMeta.getAttribute('content') : null;

        const response = await fetch('/api/logout', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            ...(csrfToken && { 'X-CSRF-Token': csrfToken })
          },
          credentials: 'include'
        });

        const result = await response.json();
        if (response.ok) {
          showToast("Logged out successfully", "success");
          localStorage.removeItem('user_id');
          window.location.href = '/login';
        } else {
          showToast(result.message || "Logout failed", "error");
        }
      } catch (error) {
        console.error("Logout error:", error);
        showToast("Logout failed due to JS error", "error");
      }
    }

    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) logoutBtn.addEventListener('click', logoutUser);

    document.getElementById('searchBtn')?.addEventListener('click', () => {
      const searchValue = document.getElementById('bookSearch').value.trim();
      fetchBooks(searchValue); 
    });

    document.getElementById('bookSearch')?.addEventListener('keyup', (e) => {
      const searchValue = e.target.value.trim();

      if (e.key === 'Enter') {
        document.getElementById('searchBtn').click();
      }

      
      if (searchValue === '') {
        fetchBooks(); 
      }
    });


    async function fetchUserAvatar(userId) {
      try {
        const response = await fetch(`/api/users/${userId}`);
        const data = await response.json();
        const avatarImg = document.getElementById("user-avatar");
        if (avatarImg) {
          avatarImg.src = data.avatar_url || "https://via.placeholder.com/150?text=No+Image";
        }
      } catch (error) {
        console.error("Error fetching avatar:", error);
        alert("Failed to load user avatar.");
      }
    }

    fetchBooks();
    fetchUserAvatar(userId);
  });
</script>

</body>
</html>
